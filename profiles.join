{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1a97c11b",
   "metadata": {},
   "source": [
    "1. Import and test 3 of the functions from your functions exercise file. Import each function in a different way:\n",
    "\n",
    "a.Run an interactive python session and import the module. Call the is_vowel function using the . syntax.\n",
    "\n",
    "b. Create a file named import_exericses.py. Within this file, use from to import the calculate_tip function directly. Call this function with values you choose and print the result.\n",
    "\n",
    "c. Create a jupyter notebook named import_exercises.ipynb. Use from to import the get_letter_grade function and give it an alias. Test this function in your notebook."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "0d99a91d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from function_practice import is_vowel as v\n",
    "\n",
    "v('a')  \n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "50c4bd45",
   "metadata": {},
   "outputs": [
    {
     "ename": "ImportError",
     "evalue": "cannot import name 'calculate_tip' from 'function_practice' (/Users/nishabista/codeup-data-science/python-exercises/function_practice.py)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[44], line 3\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# import_exercises.py\u001b[39;00m\n\u001b[0;32m----> 3\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mfunction_practice\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m calculate_tip\n\u001b[1;32m      5\u001b[0m \u001b[38;5;66;03m# Example usage\u001b[39;00m\n\u001b[1;32m      6\u001b[0m bill_amount \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m100\u001b[39m\n",
      "\u001b[0;31mImportError\u001b[0m: cannot import name 'calculate_tip' from 'function_practice' (/Users/nishabista/codeup-data-science/python-exercises/function_practice.py)"
     ]
    }
   ],
   "source": [
    "# import_exercises.py\n",
    "\n",
    "from function_practice import calculate_tip\n",
    "\n",
    "# Example usage\n",
    "bill_amount = 100\n",
    "tip_percentage = 0.15\n",
    "\n",
    "tip_amount = calculate_tip(bill_amount, tip_percentage)\n",
    "total_amount = bill_amount + tip_amount\n",
    "\n",
    "print(\"Bill Amount: $\", bill_amount)\n",
    "print(\"Tip Percentage: \", tip_percentage * 100, \"%\")\n",
    "print(\"Tip Amount: $\", tip_amount)\n",
    "print(\"Total Amount: $\", total_amount)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "442d61d9",
   "metadata": {},
   "outputs": [
    {
     "ename": "ImportError",
     "evalue": "cannot import name 'get_letter_grade' from 'function_practice' (/Users/nishabista/codeup-data-science/python-exercises/function_practice.py)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[46], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mfunction_practice\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m get_letter_grade\n",
      "\u001b[0;31mImportError\u001b[0m: cannot import name 'get_letter_grade' from 'function_practice' (/Users/nishabista/codeup-data-science/python-exercises/function_practice.py)"
     ]
    }
   ],
   "source": [
    "from function_practice import get_letter_grade"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2749e08",
   "metadata": {},
   "source": [
    "2. Read about and use the itertools module from the python standard library to help you solve the following problems. Note: Many of these functions in this library return an object, to see the results of the function, cast this object as a list.\n",
    "\n",
    "How many different ways can you combine a single letter from \"abc\" with either 1, 2, or 3?\n",
    "\n",
    "How many different combinations are there of 2 letters from \"abcd\"?\n",
    "\n",
    "How many different permutations are there of 2 letters from \"abcd\"?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "a3a145ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "import itertools"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "3e707b98",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n",
      "9\n"
     ]
    }
   ],
   "source": [
    "plist = (('a', 'b','c'), (1,2,3))\n",
    "combinations = itertools.product(*plist)\n",
    "total_combinations = 1\n",
    "for i in plist:\n",
    "    total_combinations = total_combinations * len(i)\n",
    "    print(total_combinations)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a2c54505",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "f7b42109",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "39\n"
     ]
    }
   ],
   "source": [
    "\n",
    "letters = \"abc\"\n",
    "combinations = list(itertools.product(letters, repeat=1)) + list(itertools.product(letters, repeat=2)) + list(itertools.product(letters, repeat=3))\n",
    "num_combinations = len(combinations)\n",
    "print(num_combinations)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "1b858d8f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6\n"
     ]
    }
   ],
   "source": [
    "letters = \"abcd\"\n",
    "combinations = list(itertools.combinations(letters, 2))\n",
    "num_combinations = len(combinations)\n",
    "print(num_combinations)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "6b17050f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "letters = \"abcd\"\n",
    "permutations = list(itertools.permutations(letters, 2))\n",
    "num_permutations = len(permutations)\n",
    "print(num_permutations)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c703b4de",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b9b80698",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3a3a825a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2176661d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
